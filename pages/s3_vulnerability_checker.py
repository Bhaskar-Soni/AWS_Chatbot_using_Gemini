import streamlit as st
import boto3
from botocore.exceptions import ClientError
from cryptography.fernet import Fernet
from config import CREDENTIALS_FILE, ENCRYPTION_KEY_FILE

# Function to load encryption key
def load_key():
    with open(ENCRYPTION_KEY_FILE, 'rb') as f:
        return f.read()

# Initialize Fernet cipher suite with loaded encryption key
key = load_key()
cipher_suite = Fernet(key)

# Function to decrypt data
def decrypt_data(encrypted_data):
    decrypted_data = cipher_suite.decrypt(encrypted_data.encode())
    return decrypted_data.decode()

# Function to load credentials from file and decrypt them
def load_credentials():
    with open(CREDENTIALS_FILE, 'r') as f:
        lines = f.readlines()
        access_key = decrypt_data(lines[0].split(': ')[1].strip())
        secret_key = decrypt_data(lines[1].split(': ')[1].strip())
        region = lines[2].split(': ')[1].strip()
        return access_key, secret_key, region

# Function to initialize S3 client
def initialize_s3_client(aws_access_key_id, aws_secret_access_key, region_name):
    return boto3.client('s3', aws_access_key_id=aws_access_key_id, 
                        aws_secret_access_key=aws_secret_access_key, 
                        region_name=region_name)

# Function to check bucket policies
def check_bucket_policies(s3_client):
    st.subheader("Bucket Policies")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                bucket_policy = s3_client.get_bucket_policy_status(Bucket=bucket_name)
                st.write(f"Bucket: {bucket_name}")
                st.write(f"Bucket Policy Permissions: {bucket_policy['PolicyStatus']['IsPublic']}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchBucketPolicy':
                    st.warning(f"No bucket policy found for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking bucket policies for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check bucket ACLs
def check_bucket_acls(s3_client):
    st.subheader("Bucket ACLs")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                bucket_acl = s3_client.get_bucket_acl(Bucket=bucket_name)
                st.write(f"Bucket: {bucket_name}")
                st.write(f"Bucket ACL: {bucket_acl}")
            except Exception as e:
                st.error(f"Error checking bucket ACLs for {bucket_name}: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check server-side encryption
def check_server_side_encryption(s3_client):
    st.subheader("Server-Side Encryption")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                encryption = s3_client.get_bucket_encryption(Bucket=bucket_name)
                st.write(f"Bucket: {bucket_name}")
                st.write(f"Server-side encryption is enabled.")
            except ClientError as e:
                if e.response['Error']['Code'] == 'ServerSideEncryptionConfigurationNotFoundError':
                    st.warning(f"Server-side encryption is not enabled for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking server-side encryption for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check access logging
def check_access_logging(s3_client):
    st.subheader("Access Logging")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                logging = s3_client.get_bucket_logging(Bucket=bucket_name)
                if 'LoggingEnabled' in logging:
                    st.success(f"Access logging is enabled for bucket: {bucket_name}")
                else:
                    st.warning(f"Access logging is not enabled for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchBucketLogging':
                    st.warning(f"Access logging is not enabled for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking access logging for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check CORS configurations
def check_cors_configurations(s3_client):
    st.subheader("CORS Configurations")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                cors = s3_client.get_bucket_cors(Bucket=bucket_name)
                st.write(f"Bucket: {bucket_name}")
                st.write(f"CORS Configurations: {cors}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchCORSConfiguration':
                    st.warning(f"No CORS configurations found for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking CORS configurations for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check versioning status
def check_versioning_status(s3_client):
    st.subheader("Versioning Status")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                versioning = s3_client.get_bucket_versioning(Bucket=bucket_name)
                if 'Status' in versioning:
                    st.success(f"Versioning is enabled for bucket: {bucket_name}")
                else:
                    st.warning(f"Versioning is not enabled for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchVersioningConfiguration':
                    st.warning(f"Versioning is not enabled for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking versioning status for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check bucket policy permissions
def check_policy_permissions(s3_client):
    st.subheader("Bucket Policy Permissions")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                public_access_block = s3_client.get_bucket_policy_status(Bucket=bucket_name)
                if public_access_block['PolicyStatus']['IsPublic']:
                    st.error(f"Bucket {bucket_name} is publicly accessible.")
                else:
                    st.success(f"No public access found for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchBucketPolicy':
                    st.warning(f"No bucket policy found for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking public access for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check S3 data lifecycle policies
def check_data_lifecycle_policies(s3_client):
    st.subheader("Data Lifecycle Policies")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                lifecycle_configuration = s3_client.get_bucket_lifecycle_configuration(Bucket=bucket_name)
                if 'Rules' in lifecycle_configuration and lifecycle_configuration['Rules']:
                    st.success(f"Lifecycle policies found for bucket: {bucket_name}")
                    st.write("Lifecycle configuration:")
                    st.write(lifecycle_configuration['Rules'])
                else:
                    st.warning(f"No lifecycle policies found for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchLifecycleConfiguration':
                    st.warning(f"No lifecycle policies found for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking data lifecycle policies for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check MFA Delete status for S3 buckets
def check_mfa_delete(s3_client):
    st.subheader("MFA Delete Status")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                mfa_delete = s3_client.get_bucket_versioning(Bucket=bucket_name)['MFADelete']
                if mfa_delete == 'Enabled':
                    st.success(f"MFA Delete is enabled for bucket: {bucket_name}")
                else:
                    st.warning(f"MFA Delete is not enabled for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchVersioningConfiguration':
                    st.warning(f"MFA Delete is not enabled for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking MFA Delete status for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Function to check S3 Object Lock status
def check_object_lock(s3_client):
    st.subheader("S3 Object Lock Status")
    try:
        buckets = s3_client.list_buckets()['Buckets']
        for bucket in buckets:
            bucket_name = bucket['Name']
            try:
                object_lock = s3_client.get_object_lock_configuration(Bucket=bucket_name)
                if object_lock['ObjectLockConfiguration']['ObjectLockEnabled'] == 'Enabled':
                    st.success(f"Object Lock is enabled for bucket: {bucket_name}")
                else:
                    st.warning(f"Object Lock is not enabled for bucket: {bucket_name}")
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchObjectLockConfiguration':
                    st.warning(f"No Object Lock configuration found for bucket: {bucket_name}")
                else:
                    st.error(f"Error checking S3 Object Lock status for {bucket_name}: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    except Exception as e:
        st.error(f"Error listing buckets: {str(e)}")

# Main function
def s3_vuln_checker():
    
    # AWS credentials setup
    aws_access_key_id, aws_secret_access_key, region_name = load_credentials()

    # AWS region selection
    region_name = st.selectbox("Select AWS Region", ['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'ca-central-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-central-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-south-1', 'sa-east-1'])

    if st.button("Scan S3"):
        if aws_access_key_id and aws_secret_access_key and region_name:
            try:
                # Initialize boto3 client
                s3_client = initialize_s3_client(aws_access_key_id, aws_secret_access_key, region_name)

                # Check various configurations
                check_bucket_policies(s3_client)
                check_bucket_acls(s3_client)
                check_server_side_encryption(s3_client)
                check_access_logging(s3_client)
                check_cors_configurations(s3_client)
                check_versioning_status(s3_client)
                check_policy_permissions(s3_client)
                check_data_lifecycle_policies(s3_client)
                check_mfa_delete(s3_client)
                check_object_lock(s3_client)

            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
